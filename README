This is as _WIP_ fork of opentracker (git://erdgeist.org/opentracker), inspired by (https://news.ycombinator.com/item?id=25245455) with the ability to search torrents on the tracker itself that will require libcurl, libtorrent (libtorrent-rasterbar-1.0.3, getting torrent metadata) and libarmadillo (armadillo-9.700.3, for search)


TODO: 
    - get hex hash [DONE]
      - how to store hash (mem or disk)
      	- send hash to global collection queue
    - start download to collect metadata from hash quue [IN PROGRESS]
    	- add lib curl to make outgoing request for trackers?
    	- figure out how to do this non bloking
	    - get metadata
	      - how to store metadata (mem or disk)
    - add to metdata tf-idf matrix [TODO]
    - re build low dimensional space matricies [TODO]
    	- figure out how to do this non bloking
    - search look up enpoint [TODO]

You need libowfat (http://www.fefe.de/libowfat/).

Steps to go:

cvs -d :pserver:cvs@cvs.fefe.de:/cvs -z9 co libowfat
cd libowfat
make
cd ..
cvs -d:pserver:anoncvs@cvs.erdgeist.org:/home/cvsroot co opentracker
cd opentracker
make
./opentracker

This tracker is open in a sense that everyone announcing a torrent is welcome to do so and will be informed about anyone else announcing the same torrent. Unless
-DWANT_IP_FROM_QUERY_STRING is enabled (which is meant for debugging purposes only), only source IPs are accepted. The tracker implements a minimal set of
essential features only but was able respond to far more than 10000 requests per second on a Sun Fire 2200 M2 (thats where we found no more clients able to fire
more of our testsuite.sh script).

Some tweaks you may want to try under FreeBSD:

sysctl kern.ipc.somaxconn=1024
sysctl kern.ipc.nmbclusters=32768
sysctl net.inet.tcp.msl=10000
sysctl kern.maxfiles=10240

License information:

Although the libowfat library is under GPL, Felix von Leitner agreed that the compiled binary may be distributed under the same beer ware license as the source code for opentracker. However, we like to hear from happy customers.


Invocation:
opentracker can be run by just typing ./opentracker. This will make opentracker bind to 0.0.0.0:6969 and happily serve all torrents presented to it. If ran as root, opentracker will immediately chroot to . (or any directory given with the -d option) and drop all priviliges after binding to whatever tcp or udp ports it is requested.

When options were few, opentracker used to accept all of them from command line. While this still is possible for most options, using them is quite unhandy: an example invocation would look like ./opentracker -i 23.23.23.7 -p 80 -P 80 -p 6969 -i 23.23.23.8 -p 80 -r http://www.mytorrentsite.com/ -d /usr/local/etc/opentracker -w mytorrents.list -A 127.0.0.1.

opentracker now uses a config file that you can provide with the -f switch.


Closed mode

While personally I like my tracker to be open, I can see that there's people that want to control what torrents to track â€“ or not to track. If you've compiled opentracker with one of the accesslist-options (see Build instructions above), you can control which torrents are tracked by providing a file that contains a list of human readable info_hashes. An example whitelist file would look like

0123456789abcdef0123456789abcdef01234567
890123456789abcdef0123456789abcdef012345

To make opentracker reload it's white/blacklist, send a SIGHUP unix signal.
